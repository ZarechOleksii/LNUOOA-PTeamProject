name: Lint, test, code coverage, report

on:
  pull_request:
    branches:
      - main

env:
    TEST_SOLUTION_NAME: Tests/AllTests.sln
    RECEIVER_PROJECT_NAME: ReceiverWebApp
    PROCESSOR_PROJECT_NAME: ProcessorWebApi
    ACR_RESOURCE_GROUP: SaveVid
    AZURE_CONTAINER_REGISTRY: SaveVid
    CLUSTER_NAME: SaveVid-LowCost-AKS
    CLUSTER_RESOURCE_GROUP: SaveVid
    CONTAINER_NAME: processorimage
    DEPLOYMENT_MANIFEST_PATH: |
        ./ProcessorWebApi/deployment.yml
        ./ProcessorWebApi/service.yml

jobs:

  run-tests-and-coverage:
    name: Run tests and get code coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'
          include-prerelease: true

      - name: Test with dotnet
        run: dotnet test ${{ env.TEST_SOLUTION_NAME }} -c Debug --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage --logger "trx;LogFileName=test-results.trx" || true

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '10 10'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md
          
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: DotNET Tests
          path: "**/test-results.trx"                            
          reporter: dotnet-trx
          fail-on-error: true


  run-linters:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "8.x"

      - name: Run linters
        uses: wearerequired/lint-action@v2
        with:
          continue_on_error: false
          dotnet_format: true


  build-and-publish:
    name: Build and publish
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'
          include-prerelease: true

      - name: Versioning 
        id: version
        uses: paulhatch/semantic-version@latest

      - name: Build receiver with dotnet
        run: dotnet build ${{ env.RECEIVER_PROJECT_NAME }}/${{ env.RECEIVER_PROJECT_NAME }}.sln -c Release

      - name: Publish receiver with dotnet
        run: dotnet publish ${{ env.RECEIVER_PROJECT_NAME }}/${{ env.RECEIVER_PROJECT_NAME }}.sln -c Release -o ${{env.DOTNET_ROOT}}/myapp -p:Version=${{ steps.version.outputs.version }}

      - name: Build processor with dotnet
        run: dotnet build ${{ env.PROCESSOR_PROJECT_NAME }}.sln -c Release

      - name: Publish processor with dotnet
        run: dotnet publish ${{ env.PROCESSOR_PROJECT_NAME }}.sln -c Release -o ${{env.DOTNET_ROOT}}/myapp2 -p:Version=${{ steps.version.outputs.version }}

